@inject IUserServiceClient UserService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Assign User for project id @project.Id
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6">
                <MudSelect class="mt-3" Margin="Margin.Dense" Label="User" Variant="Variant.Outlined" @bind-Value="@_userProjectAssignRemoveDTO.UserId">
                    <MudSelectItem T=int Disabled="true">Select User</MudSelectItem>

                    @foreach (var user in UserService.Users)
                    {
                        <MudSelectItem T=int Value="@user.Id">@(user.Name) @(user.Surname)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Info" OnClick="AssignUser">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public ProjectGetDTO project { get; set; } = new ProjectGetDTO();

    UserProjectAddRemoveDTO _userProjectAssignRemoveDTO = new UserProjectAddRemoveDTO();

    protected override async Task OnParametersSetAsync()
    {
        await UserService.GetAllUsers();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    async Task AssignUser()
    {
        _userProjectAssignRemoveDTO.ProjectId = project.Id;
        await UserService.AssignUserToProject(_userProjectAssignRemoveDTO);
        MudDialog.Close(DialogResult.Ok(project));
    }
}