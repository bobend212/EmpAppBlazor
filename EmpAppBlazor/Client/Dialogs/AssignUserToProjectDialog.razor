@inject IUserServiceClient UserService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Filled.People" Class="mr-3 mb-n1" />
            Design Team Management / @project.Number @project.Name
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6">
                <MudTable Items="UserService.UsersNotAssigned" Dense="true" Bordered="true" Striped="true" Filter="new Func<User,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
                    <ToolBarContent>
                        <MudText Typo="Typo.subtitle1">Available Users [@UserService.UsersNotAssigned.Count()]</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>User</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Name @context.Surname</MudTd>
                        <MudTd>
                            <MudIconButton OnClick="@((e) => AssignUser(@context.Id))" Class="mr-3" Icon="@Icons.Filled.PersonAddAlt1" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="6">
                <MudTable Items="UserService.UsersAssigned" Dense="true" Bordered="true" Striped="true" Filter="new Func<User,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
                    <ToolBarContent>
                        <MudText Typo="Typo.subtitle1">Assigned to this Project [@UserService.UsersAssigned.Count()]</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>User</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Name @context.Surname</MudTd>
                        <MudTd>
                            <MudIconButton OnClick="@((e) => RemoveUserFromProject(@context.Id))" Icon="@Icons.Filled.PersonRemoveAlt1" Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Small" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" OnClick="ApplyChanges">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public ProjectGetDTO project { get; set; } = new ProjectGetDTO();

    UserProjectAddRemoveDTO _userProjectAssignRemoveDTO = new UserProjectAddRemoveDTO();

    private string searchString1 = "";
    private User selectedItem1 = null;
    private HashSet<User> selectedItems = new HashSet<User>();

    protected override async Task OnParametersSetAsync()
    {
        await UserService.GetAllUsers();
        await UserService.GetAllUsersAssignedToProject(project.Id);
        await UserService.GetAllUsersNotAssignedToProject(project.Id);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    async Task AssignUser(int userId)
    {
        _userProjectAssignRemoveDTO.ProjectId = project.Id;
        _userProjectAssignRemoveDTO.UserId = userId;
        await UserService.AssignUserToProject(_userProjectAssignRemoveDTO);
        await UserService.GetAllUsersAssignedToProject(project.Id);
        await UserService.GetAllUsersNotAssignedToProject(project.Id);
    }

    async Task RemoveUserFromProject(int userId)
    {
        _userProjectAssignRemoveDTO.ProjectId = project.Id;
        _userProjectAssignRemoveDTO.UserId = userId;
        await UserService.RemoveUserFromProject(_userProjectAssignRemoveDTO);
        await UserService.GetAllUsersAssignedToProject(project.Id);
        await UserService.GetAllUsersNotAssignedToProject(project.Id);
    }

    private void ApplyChanges()
    {
        MudDialog.Close(DialogResult.Ok(project));
    }

    private bool FilterFunc1(User element) => FilterFunc(element, searchString1);

    private bool FilterFunc(User element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{element.Name} {element.Surname}".Contains(searchString))
            return true;
        return false;
    }
}