@page "/task/list"
@inject ITaskItemServiceClient TaskItemService
@using System.Security.Claims
@using EmpAppBlazor.Client.Dialogs
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProjectServiceClient ProjectService
@inject IUserServiceClient UserService
@inject IDialogService DialogService

<div class="mx-4">
    <MudExpansionPanels Elevation="4">

        <MudExpansionPanel MaxHeight="200">
            <TitleContent>
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Filled.BookmarkAdd" class="mr-3"></MudIcon>
                    <MudText><strong>New Task</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudPaper Elevation="0" Class="pa-1 rounded-lg">
                    <MudForm @ref="form">
                        <div class="d-flex align-center justify-space-between mx-auto">
                            <div>
                                <MudTextField class="mr-5 mb-1" Margin="Margin.Dense" T="string" Label="Title" Variant="Variant.Outlined" @bind-Value="@newTask.Title" Required="true"></MudTextField>
                                <MudDatePicker class="mr-5 mb-2" Label="Due Date" Variant="Variant.Outlined" @bind-Date="@newTask.DueDate" />
                            </div>
                            <MudTextField class="mr-5" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="5" @bind-Value="@newTask.Description"></MudTextField>
                            <div>
                                @if (loggedUserRole == "Admin")
                                {
                                    <MudSelect class="mr-5 mb-3" Margin="Margin.Dense" Label="Assign To" Variant="Variant.Outlined" @bind-Value="@newTask.AssignedToId">
                                        @foreach (var user in UserService.Users)
                                        {
                                        <MudSelectItem T=int? Value="@user.Id">@(user.Name) @(user.Surname)</MudSelectItem>
                                        }
                                </MudSelect>

                                }
                                <MudSelect class="mr-5" Margin="Margin.Dense" Label="Project" Variant="Variant.Outlined" @bind-Value="@newTask.ProjectId">
                                    @foreach (var project in ProjectService.Projects)
                                    {
                                        <MudSelectItem T=int? Value="@project.Id">@(project.Number) @(project.Name)</MudSelectItem>
                                    }
                                </MudSelect>
                            </div>
                            <div>
                                <MudSelect class="mr-5 mb-3" Margin="Margin.Dense" Label="Status" Variant="Variant.Outlined" @bind-Value="@newTask.TaskStatus">
                                    <MudSelectItem Value="@("not started")"><MudIcon Icon="@Icons.Filled.StopCircle" Color="Color.Default" /> Not started </MudSelectItem>
                                    <MudSelectItem Value="@("active")"><MudIcon Icon="@Icons.Filled.Work" Color="Color.Success" /> active </MudSelectItem>
                                    <MudSelectItem Value="@("done")"><MudIcon Icon="@Icons.Filled.Done" Color="Color.Info" /> done </MudSelectItem>
                                </MudSelect>
                                <MudSelect class="mr-5" Margin="Margin.Dense" Label="Importance level" Variant="Variant.Outlined" @bind-Value="@newTask.Importance">
                                    <MudSelectItem Value="@("low")" />
                                    <MudSelectItem Value="@("normal")" />
                                    <MudSelectItem Value="@("high")" />
                                </MudSelect>
                            </div>
                        </div>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" DisableElevation="false" OnClick="AddNewTask">Add task</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
                    </MudForm>
                </MudPaper>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>


<MudDropContainer T="TaskItemGetDTO" Items="TaskItemService.TaskItems" ItemsSelector="@((item,dropzone) => item.TaskStatus == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        @if (@TaskItemService.TaskItems.Where(x => x.TaskStatus == "").Count() > 0)
        {
            <MudDropZone T="TaskItemGetDTO" Identifier="" Class="rounded-lg mud-alert-text-warning pa-4 ma-4 flex-1">
                <MudText Typo="Typo.h6" Class="mb-4">no label (@TaskItemService.TaskItems.Where(x => x.TaskStatus == "").Count())</MudText>
            </MudDropZone>
        }
        <MudDropZone T="TaskItemGetDTO" Identifier="not started" Class="rounded-lg mud-alert-text-warning pa-4 ma-4 flex-1">
            <MudText Typo="Typo.h6" Class="mb-4">not started (@TaskItemService.TaskItems.Where(x => x.TaskStatus == "not started").Count())</MudText>
        </MudDropZone>
        <MudDropZone T="TaskItemGetDTO" Identifier="active" Class="rounded-lg mud-alert-text-success pa-4 ma-4 flex-1">
            <MudText Typo="Typo.h6" Class="mb-4">active (@TaskItemService.TaskItems.Where(x => x.TaskStatus == "active").Count())</MudText>
        </MudDropZone>
        <MudDropZone T="TaskItemGetDTO" Identifier="done" Class="rounded-lg mud-alert-text-info pa-4 ma-4 flex-1">
            <MudText Typo="Typo.h6" Class="mb-4">done (@TaskItemService.TaskItems.Where(x => x.TaskStatus == "done").Count())</MudText>
        </MudDropZone>
    </ChildContent>
    <ItemRenderer>
        <MudCard Class="ma-2">

            <div class="task-header">
                <MudIconButton Icon="@Icons.Filled.Settings" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => OpenEditTaskItemDialog(@context))" />

                @if (@context.Project != null)
                {
                    <MudText Typo="Typo.subtitle2">@context.Project?.Number @context.Project?.Name</MudText>
                }
                @if (@context.Importance == "high")
                {
                    <MudIcon Icon="@Icons.Filled.PriorityHigh" Size="Size.Small" Title="High Priority" Color="Color.Warning" />
                }
                @if (@context.Importance == "low")
                {
                    <MudIcon Icon="@Icons.Filled.VerticalAlignBottom" Size="Size.Small" Title="Low Priority" Color="Color.Info" />
                }

            </div>

            <MudCardContent Class="pa-1">
                <div>
                    <div class="item-card">
                        <MudText Typo="Typo.subtitle1">@context.Title</MudText>
                    </div>
                    <div class="item-card">
                        <MudText Typo="Typo.caption">@context.DueDate?.ToString("dd/MMM/yyyy")</MudText>
                    </div>
                    <div class="item-card">
                        <MudText Typo="Typo.caption">@context.Description</MudText>
                    </div>
                    <div class="item-card">
                        <MudText Typo="Typo.caption"><i>@context.AssignedTo?.Name @context.AssignedTo?.Surname</i></MudText>
                    </div>
                </div>
            </MudCardContent>
        </MudCard>
    </ItemRenderer>
</MudDropContainer>

@code {
    TaskItemGetDTO taskItem = new TaskItemGetDTO();
    TaskItemGetDTO newTask = new TaskItemGetDTO();
    int loggedUserId;
    string loggedUserRole;
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        await ProjectService.GetProjects();
        await UserService.GetAllUsers();

        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        loggedUserId = Convert.ToInt32(authstate.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        loggedUserRole = authstate.User.FindFirst(ClaimTypes.Role).Value;

        await PopulateTasks(loggedUserRole);
    }

    private async Task ItemUpdated(MudItemDropInfo<TaskItemGetDTO> dropItem)
    {
        dropItem.Item.TaskStatus = dropItem.DropzoneIdentifier;

        taskItem.TaskItemId = dropItem.Item.TaskItemId;
        taskItem.TaskStatus = dropItem.DropzoneIdentifier;
        taskItem.EditorId = loggedUserId;
        await TaskItemService.UpdateTaskItemStatus(taskItem);
    }

    async Task AddNewTask()
    {
        if (newTask.AssignedToId == null) newTask.AssignedToId = loggedUserId;
        if (newTask.Importance == "" || newTask.Importance == null) newTask.Importance = "normal";
        if (newTask.TaskStatus == "" || newTask.TaskStatus == null) newTask.TaskStatus = "";
        newTask.AuthorId = loggedUserId;
        if (loggedUserRole != "Admin")
        {
            newTask.AssignedToId = loggedUserId;
        }
        await TaskItemService.CreateTaskItem(newTask);
        form.Reset();
        await PopulateTasks(loggedUserRole);
    }

    async Task PopulateTasks(string role)
    {
        if (role == "Admin")
        {
            await TaskItemService.GetTasks();
        }
        else
        {
            await TaskItemService.GetTasksByUserId(loggedUserId);
        }
    }

    async Task OpenEditTaskItemDialog(TaskItemGetDTO taskItem)
    {
        var parameters = new DialogParameters { ["taskItem"] = taskItem };
        var options = new MudBlazor.DialogOptions { FullWidth = true };

        var dialog = DialogService.Show<EditTaskItemDialog>("Edit Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await PopulateTasks(loggedUserRole);
        }
    }
}



































@code {

}
