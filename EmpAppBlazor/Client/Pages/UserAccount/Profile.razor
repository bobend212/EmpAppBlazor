@page "/profile"
@using System.Security.Claims
@inject IAuthServiceClient AuthService
@inject IUserServiceClient UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<MudGrid Class="py-4">
    <MudItem xs="12">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="6">
                <MudPaper Elevation="5" Class="flex-column align-center justify-center py-3 p-3">
                    <MudText Typo="Typo.h5"><MudIcon Icon="@Icons.Filled.AccountCircle"/> Change Account Details</MudText>
                    <MudForm>

                        <div class="mb-3 mt-2">
                            <MudTextField @bind-Value="requestAccountDetails.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                        </div>

                        <div class="mb-3 mt-2">
                            <MudTextField @bind-Value="requestAccountDetails.Surname" Label="Surname" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                        </div>

                        <div class="mb-3 mt-2">
                            <MudTextField @bind-Value="requestAccountDetails.Title" Label="Title" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true"></MudTextField>
                        </div>

                        <div class="mb-3 mt-2">
                            <MudTextField @bind-Value="requestAccountDetails.Department" Label="Department" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true"></MudTextField>
                        </div>

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="ChangeAccountDetails">Change</MudButton>

                    </MudForm>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Elevation="5" Class="flex-column align-center justify-center py-3 p-3">
                    <MudText Typo="Typo.h5"><MudIcon Icon="@Icons.Filled.VerifiedUser"/> Change Password</MudText>
                    <MudForm @ref="form" @bind-IsValid="@validFormChangePass">
                        <div class="mb-3 mt-2">
                            <MudTextField @bind-Value="request.Password" Label="New Password" Variant="Variant.Outlined" Margin="Margin.Dense"
                                          Required="true" @ref="pwField1"
                                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"></MudTextField>
                        </div>

                        <div class="mb-3">
                            <MudTextField @bind-Value="request.ConfirmPassword" Label="Confirm New Password" Variant="Variant.Outlined" Margin="Margin.Dense"
                                          Required="true"
                                          Validation="@(new Func<string, string>(PasswordMatch))"></MudTextField>
                        </div>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Disabled="@(!validFormChangePass)" OnClick="ChangePassword">Change</MudButton>

                    </MudForm>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>

</MudGrid>

@code {
    UserChangePassword request = new UserChangePassword();
    UserDTO requestAccountDetails = new UserDTO();
    bool validFormChangePass;
    MudForm form;
    MudTextField<string> pwField1;
    int loggedUserId;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        loggedUserId = Convert.ToInt32(authstate.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        requestAccountDetails = (await UserService.GetSingleUser(loggedUserId)).Data;
    }

    private async Task ChangePassword()
    {
        var result = await AuthService.ChangePassword(request);
    }

    private async Task ChangeAccountDetails()
    {
        requestAccountDetails.UpdateDate = DateTime.Now;
        var result = await AuthService.ChangeAccountDetails(requestAccountDetails);
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 6)
            yield return "Password must be at least of length 6";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
}
