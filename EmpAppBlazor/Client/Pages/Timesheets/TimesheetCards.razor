@page "/timesheet/cards"
@using Radzen.Blazor
@inject IProjectServiceClient ProjectService

<h3>TimesheetCards</h3>

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add New Order" Click="@InsertRow" Disabled=@(projectToInsert != null) />
<RadzenDataGrid @ref="projectsGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="Radzen.DataGridEditMode.Single"
                Data="@ProjectService.Projects" TItem="ProjectGetDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn TItem="ProjectGetDTO" Property="Name" Title="Name">
            <Template Context="project">
                @project.Name
            </Template>
            <EditTemplate Context="project">
                <RadzenTextBox @bind-Value="project.Name" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ProjectGetDTO" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
            <Template Context="project">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(project))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="project">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(project))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(project))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ProjectGetDTO" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="project">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(project))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="project">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(project))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<ProjectGetDTO> projectsGrid;
    IList<ProjectGetDTO> projects;
    ProjectGetDTO projectToInsert;

    protected override async Task OnInitializedAsync()
    {
        await ProjectService.GetProjects();
    }

    async Task EditRow(ProjectGetDTO order)
    {
        await projectsGrid.EditRow(order);
    }

    async Task OnUpdateRow(ProjectGetDTO order)
    {
        //Console.WriteLine("save.");
        //await ProjectService.UpdateProject(order);
    }

    async Task SaveRow(ProjectGetDTO order)
    {
        if (order.Id != 0)
        {
            Console.WriteLine("edit.");
            await ProjectService.UpdateProject(order);
        }
        else
        {
            Console.WriteLine("save new.");
            await ProjectService.CreateProject(projectToInsert);
        }

    }

    void CancelEdit(ProjectGetDTO order)
    {
        Console.WriteLine("exit.");
        if (order == projectToInsert)
        {
            projectToInsert = null;
        }

        projectsGrid.CancelEditRow(order);
    }

    async Task DeleteRow(ProjectGetDTO order)
    {

    }

    async Task InsertRow()
    {
        projectToInsert = new ProjectGetDTO();
        await projectsGrid.InsertRow(projectToInsert);
        Console.WriteLine("insert row.");
    }

    async Task OnCreateRow(ProjectGetDTO order)
    {
        Console.WriteLine("on create row.");
        
        //dbContext.Add(order);

        // For production
        //dbContext.SaveChanges();
    }
}
