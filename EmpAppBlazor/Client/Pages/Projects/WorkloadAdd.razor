@page "/workload/add"
@page "/workload/add/{id:int}"
@using System.Globalization
@inject IProjectServiceClient ProjectService
@inject IWorkloadService WorkloadService
@inject IUserServiceClient UserService
@inject NavigationManager NavigationManager

    @if (Id == 0)
{
    <h3>workload list soon...</h3>
}
else
{
    <div>
        <h3>New workload for <strong>@project.Number @project.Name</strong></h3>
    </div>

    <MudPaper Class="pa-4" Elevation="9">
        <MudText Typo="Typo.subtitle2">Workload Information</MudText>
        <MudForm>
            <MudSelect @bind-Value="@workload.ProductionStage" Label="Production Stage">
                <MudSelectItem Value="@("Not Started")"><MudIcon Icon="@Icons.Filled.StopCircle" Color="Color.Default" /> Not Started </MudSelectItem>
                <MudSelectItem Value="@("In Progress")"><MudIcon Icon="@Icons.Filled.Work" Color="Color.Success" /> In Progress </MudSelectItem>
                <MudSelectItem Value="@("Done")"><MudIcon Icon="@Icons.Filled.Done" Color="Color.Info" /> Done </MudSelectItem>
            </MudSelect>
            <div class="d-flex align-center justify-space-between mt-6 mb-6">
                <MudDatePicker class="mr-5" Label="Delivery Date" DateFormat="dd/MMMM/yyyy" Culture="@CultureInfo.GetCultureInfo("pl-pl")" @bind-Date="workload.DeliveryDate" />
                <MudDatePicker class="mr-5" Label="Required Date" DateFormat="dd/MMMM/yyyy" Culture="@CultureInfo.GetCultureInfo("pl-pl")" Required="true" @bind-Date="workload.RequiredDate" />
                <MudDatePicker Label="Order Date" DateFormat="dd/MMMM/yyyy" Culture="@CultureInfo.GetCultureInfo("pl-pl")" @bind-Date="workload.OrderPlaced" />
            </div>
            <MudTextField T="string" Label="Comments/description/notes" Variant="Variant.Outlined" Lines="5" @bind-Value="workload.Comments" />
            <MudSelect class="mt-3" Margin="Margin.Dense" Label="Design Leader" Variant="Variant.Outlined" @bind-Value="@workload.DesignLeaderId">
                @foreach (var user in UserService.Users)
                {
                <MudSelectItem T=int? Value="@user.Id">@(user.Name) @(user.Surname)</MudSelectItem>
                }
        </MudSelect>
    </MudForm>
</MudPaper>
    <MudPaper Class="pa-4 mt-4" Elevation="9">
        <div class="action-buttons-centered">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="false" OnClick="AddWorkload">Add Workload</MudButton>
        </div>
    </MudPaper>
}




@code {
    [Parameter]
    public int Id { get; set; }

    Project project = new Project();
    Workload workload = new Workload();

    protected override async Task OnParametersSetAsync()
    {
        await UserService.GetAllUsers();
        //Project dbProject = (await ProjectService.GetSingleProject(Id)).Data;
        //project = dbProject;
    }

    async Task AddWorkload()
    {
        workload.ProjectId = Id;
        var result = await WorkloadService.CreateWorkload(workload);
        NavigationManager.NavigateTo("/project/list");
    }

}
